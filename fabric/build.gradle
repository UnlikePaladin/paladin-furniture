plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.shedaniel.me" }
    maven { url 'https://maven.blamejared.com' }
    maven {
        name 'Gegy'
        url 'https://maven.gegy.dev'
    }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://jitpack.io' }
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

if (rootProject.sandwichable_compatibility == "true") {
    dependencies {
        modImplementation("maven.modrinth:sandwichable:${rootProject.sandwichable_version}")
        modImplementation("dev.lambdaurora:spruceui:${rootProject.spruceui_version}")
    }
}
else {
    dependencies {
        modCompileOnly("maven.modrinth:sandwichable:${rootProject.sandwichable_version}")
        modCompileOnly("dev.lambdaurora:spruceui:${rootProject.spruceui_version}")
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

if (rootProject.rei_compatibility == "true"){
    dependencies {
        modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}"
        modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    }
}
else {
    dependencies {
        modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}"
    }
}

if (rootProject.patchouli_compatibility == "true") {
    dependencies {
        modImplementation("vazkii.patchouli:Patchouli:${rootProject.patchouli_version_fabric}")
    }
}
else {
    dependencies {
        modCompileOnly("vazkii.patchouli:Patchouli:${rootProject.patchouli_version_fabric}")
    }
}

if (rootProject.arrp_compatibility == "true") {
    dependencies {
        modImplementation "curse.maven:arrp-463113:${rootProject.arrp_version}"
    }
}
else {
    dependencies {
        modCompileOnly "curse.maven:arrp-463113:${rootProject.arrp_version}"
    }
}

if (rootProject.immersive_portals_compatibility= "true"){
    dependencies {
        modImplementation ("com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:${rootProject.immersive_portals_version_fabric}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
        modImplementation("com.github.qouteall.ImmersivePortalsMod:q_misc_util:${rootProject.immersive_portals_version_fabric}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }
}
else {
    dependencies {
        modCompileOnly("com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:${rootProject.immersive_portals_version_fabric}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
        modCompileOnly("com.github.qouteall.ImmersivePortalsMod:q_misc_util:${rootProject.immersive_portals_version_fabric}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file

    // Fabric API. This is technically optional, but you probably want it anyway.

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        transitive = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = "fabric-mc${rootProject.minecraft_version}"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
